# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: node:lts

stages: # List of stages for jobs, and their order of execution
  - setup
  - check-version
  - quality
  - deploy

setup-job:
  stage: setup
  script:
    - printenv
    - yarn install # Instala as dependências com o Yarn
  artifacts:
    paths:
      - node_modules/ # Salva as dependências instaladas como artefatos para uso em etapas subsequentes
  only:
    - merge_requests

check-version-job:
  stage: check-version
  script:
    - git fetch
    - yarn install # Instala as dependências com o Yarn
    - yarn bump:check
  needs:
    - job: setup-job
  only:
    - merge_requests

unit-test-job: # This job runs in the test stage.
  stage: quality # It only starts when the job in the build stage completes successfully.
  script:
    - yarn build:tokens
    - yarn test:ci
  needs:
    - job: setup-job
    - job: check-version-job
  only:
    - merge_requests

lint-job: # This job also runs in the test stage.
  stage: quality # It can run at the same time as unit-test-job (in parallel).
  script:
    - yarn lint
  needs:
    - job: setup-job
    - job: check-version-job
  only:
    - merge_requests

deploy-stable-job: # This job runs in the deploy-stable stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - printenv
    - if [ ! -d .yarn/versions ]; then echo "Não há uma versão a ser publicada, abortando deploy."; exit 0; fi
    - echo "//registry.npmjs.org/:_authToken=${NPM_ACCESS_TOKEN}" >> .npmrc
    - npm publish
    - cat .npmrc
    - yarn install # Instala as dependências com o Yarn
    - yarn bump:check
    - yarn publish:stable
    - git config --global user.email "${GITLAB_USER_NAME}"
    - git config --global user.name "${GITLAB_USER_EMAIL}"
    - git fetch
    - git checkout main
    - git pull
    - git add .
    - git commit -m "Publish release stable [skip ci]"
    - git push https://gitlab-ci-token:${PERSONAL_ACCESS_TOKEN}@git.rarolabs.com.br/frontend/raro-crypto.git HEAD:main
  rules:
    - if: $CI_PIPELINE_SOURCE == "merged_result" # Verifica se o evento que acionou a pipeline é um merge request
    - if: $CI_COMMIT_BRANCH == "main" # Verifica se a branch de destino do merge request é a main
