/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonVariants, TabsVariants } from "@rarui/styles";
export { ButtonVariants, TabsVariants } from "@rarui/styles";
export namespace Components {
  interface RaruiBox {
    as: string;
  }
  interface RaruiButton {
    appearance: ButtonVariants["appearance"];
    as: string;
    disabled: HTMLButtonElement["disabled"];
    full: ButtonVariants["full"];
    href: HTMLAnchorElement["href"];
    size: ButtonVariants["size"];
    target: HTMLAnchorElement["target"];
    type: HTMLButtonElement["type"];
    variant: ButtonVariants["variant"];
  }
  interface RaruiTabs {
    defaultTab: number;
    full: TabsVariants["full"];
    position: TabsVariants["position"];
    underlined: TabsVariants["underlined"];
  }
  interface RaruiTabsItem {
    label: string;
  }
  interface RaruiText {
    as: "p" | "span";
    lineClamp: string;
  }
  interface RaruiTitle {
    as: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
    lineclamp: string;
  }
}
export interface RaruiTabsCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLRaruiTabsElement;
}
declare global {
  interface HTMLRaruiBoxElement
    extends Components.RaruiBox,
      HTMLStencilElement {}
  var HTMLRaruiBoxElement: {
    prototype: HTMLRaruiBoxElement;
    new (): HTMLRaruiBoxElement;
  };
  interface HTMLRaruiButtonElement
    extends Components.RaruiButton,
      HTMLStencilElement {}
  var HTMLRaruiButtonElement: {
    prototype: HTMLRaruiButtonElement;
    new (): HTMLRaruiButtonElement;
  };
  interface HTMLRaruiTabsElementEventMap {
    selectedTab: number;
  }
  interface HTMLRaruiTabsElement
    extends Components.RaruiTabs,
      HTMLStencilElement {
    addEventListener<K extends keyof HTMLRaruiTabsElementEventMap>(
      type: K,
      listener: (
        this: HTMLRaruiTabsElement,
        ev: RaruiTabsCustomEvent<HTMLRaruiTabsElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLRaruiTabsElementEventMap>(
      type: K,
      listener: (
        this: HTMLRaruiTabsElement,
        ev: RaruiTabsCustomEvent<HTMLRaruiTabsElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }
  var HTMLRaruiTabsElement: {
    prototype: HTMLRaruiTabsElement;
    new (): HTMLRaruiTabsElement;
  };
  interface HTMLRaruiTabsItemElement
    extends Components.RaruiTabsItem,
      HTMLStencilElement {}
  var HTMLRaruiTabsItemElement: {
    prototype: HTMLRaruiTabsItemElement;
    new (): HTMLRaruiTabsItemElement;
  };
  interface HTMLRaruiTextElement
    extends Components.RaruiText,
      HTMLStencilElement {}
  var HTMLRaruiTextElement: {
    prototype: HTMLRaruiTextElement;
    new (): HTMLRaruiTextElement;
  };
  interface HTMLRaruiTitleElement
    extends Components.RaruiTitle,
      HTMLStencilElement {}
  var HTMLRaruiTitleElement: {
    prototype: HTMLRaruiTitleElement;
    new (): HTMLRaruiTitleElement;
  };
  interface HTMLElementTagNameMap {
    "rarui-box": HTMLRaruiBoxElement;
    "rarui-button": HTMLRaruiButtonElement;
    "rarui-tabs": HTMLRaruiTabsElement;
    "rarui-tabs-item": HTMLRaruiTabsItemElement;
    "rarui-text": HTMLRaruiTextElement;
    "rarui-title": HTMLRaruiTitleElement;
  }
}
declare namespace LocalJSX {
  interface RaruiBox {
    as?: string;
  }
  interface RaruiButton {
    appearance?: ButtonVariants["appearance"];
    as?: string;
    disabled?: HTMLButtonElement["disabled"];
    full?: ButtonVariants["full"];
    href?: HTMLAnchorElement["href"];
    size?: ButtonVariants["size"];
    target?: HTMLAnchorElement["target"];
    type?: HTMLButtonElement["type"];
    variant?: ButtonVariants["variant"];
  }
  interface RaruiTabs {
    defaultTab?: number;
    full?: TabsVariants["full"];
    onSelectedTab?: (event: RaruiTabsCustomEvent<number>) => void;
    position?: TabsVariants["position"];
    underlined?: TabsVariants["underlined"];
  }
  interface RaruiTabsItem {
    label?: string;
  }
  interface RaruiText {
    as?: "p" | "span";
    lineClamp?: string;
  }
  interface RaruiTitle {
    as?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
    lineclamp?: string;
  }
  interface IntrinsicElements {
    "rarui-box": RaruiBox;
    "rarui-button": RaruiButton;
    "rarui-tabs": RaruiTabs;
    "rarui-tabs-item": RaruiTabsItem;
    "rarui-text": RaruiText;
    "rarui-title": RaruiTitle;
  }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      "rarui-box": LocalJSX.RaruiBox &
        JSXBase.HTMLAttributes<HTMLRaruiBoxElement>;
      "rarui-button": LocalJSX.RaruiButton &
        JSXBase.HTMLAttributes<HTMLRaruiButtonElement>;
      "rarui-tabs": LocalJSX.RaruiTabs &
        JSXBase.HTMLAttributes<HTMLRaruiTabsElement>;
      "rarui-tabs-item": LocalJSX.RaruiTabsItem &
        JSXBase.HTMLAttributes<HTMLRaruiTabsItemElement>;
      "rarui-text": LocalJSX.RaruiText &
        JSXBase.HTMLAttributes<HTMLRaruiTextElement>;
      "rarui-title": LocalJSX.RaruiTitle &
        JSXBase.HTMLAttributes<HTMLRaruiTitleElement>;
    }
  }
}
