/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { TabsVariants } from "@rarui/styles";
export { TabsVariants } from "@rarui/styles";
export namespace Components {
  interface RaruiTabs {
    defaultTab: number;
    full: TabsVariants["full"];
    position: TabsVariants["position"];
    underlined: TabsVariants["underlined"];
  }
}
export interface RaruiTabsCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLRaruiTabsElement;
}
declare global {
  interface HTMLRaruiTabsElementEventMap {
    selectedTab: number;
  }
  interface HTMLRaruiTabsElement
    extends Components.RaruiTabs,
      HTMLStencilElement {
    addEventListener<K extends keyof HTMLRaruiTabsElementEventMap>(
      type: K,
      listener: (
        this: HTMLRaruiTabsElement,
        ev: RaruiTabsCustomEvent<HTMLRaruiTabsElementEventMap[K]>,
      ) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): void;
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLRaruiTabsElementEventMap>(
      type: K,
      listener: (
        this: HTMLRaruiTabsElement,
        ev: RaruiTabsCustomEvent<HTMLRaruiTabsElementEventMap[K]>,
      ) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof DocumentEventMap>(
      type: K,
      listener: (this: Document, ev: DocumentEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(
      type: K,
      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | EventListenerOptions,
    ): void;
    removeEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | EventListenerOptions,
    ): void;
  }
  var HTMLRaruiTabsElement: {
    prototype: HTMLRaruiTabsElement;
    new (): HTMLRaruiTabsElement;
  };
  interface HTMLElementTagNameMap {
    "rarui-tabs": HTMLRaruiTabsElement;
  }
}
declare namespace LocalJSX {
  interface RaruiTabs {
    defaultTab?: number;
    full?: TabsVariants["full"];
    onSelectedTab?: (event: RaruiTabsCustomEvent<number>) => void;
    position?: TabsVariants["position"];
    underlined?: TabsVariants["underlined"];
  }
  interface IntrinsicElements {
    "rarui-tabs": RaruiTabs;
  }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      "rarui-tabs": LocalJSX.RaruiTabs &
        JSXBase.HTMLAttributes<HTMLRaruiTabsElement>;
    }
  }
}
